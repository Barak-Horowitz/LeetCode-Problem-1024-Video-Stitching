// PROBLEM DESCRIPTION 

You are given a series of video clips from a sporting event that 
lasted time seconds. These video clips can be overlapping with each
 other and have varying lengths.

Each video clip is described by an array clips where 
clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.

We can cut these clips into segments freely.

For example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].
Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. If the task is impossible, return -1.

// SOLUTION
from the get-go this seems like a greedy algorithm so lets try and 
come up with some decision criteria, assume we have two clips
which start at the same time, obviously we should pick the clip
which gives us the most options to choose from when picking our 
next clip, we note that if we pick the longer clip out of the two we
will be able to choose any clip the shorter clip had access to, giving
us the intuitive greedy algorithm. always choose the clip which has
the latest end time. 
